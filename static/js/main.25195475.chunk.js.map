{"version":3,"sources":["components/main-form/MainForm.tsx","components/card/Card.tsx","components/statistics/tools.ts","components/dynamic-card/DynamicCard.tsx","components/statistics/Statistics.tsx","components/title/Title.tsx","pages/landing-page/LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["schema","yup","startHour","required","payDay","monthlyPay","typeError","positive","integer","InputField","labelName","fieldName","register","errors","options","defaultValue","message","MainForm","setFormData","setShowStatistics","useForm","resolver","yupResolver","handleSubmit","formState","onSubmit","data","type","Card","title","value","styles","className","style","addCurrency","currency","precise","precision","Number","toFixed","computeTimeStatistics","startTime","moment","currentTime","endTime","add","moneyPerDay","isAfter","moneySoFar","moneyLeft","isBefore","totalDayTime","diff","cardsLayout","perSecond","_tag","position","perHour","perYear","update","daysUntil","computeDaysUntil","payday","paydayTime","date","computeStatistics","hydrateValues","statistics","formData","Object","entries","map","key","layout","row","column","isDynamic","id","gridRow","gridColumn","DynamicCard","useState","currentValue","setCurrentValue","useEffect","interval","setInterval","clearInterval","Statistics","card","onClick","Title","initialFormData","LandingPage","showStatistics","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25195475.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  useForm,\r\n  SubmitHandler,\r\n  UseFormRegister,\r\n  FieldErrors,\r\n} from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport './MainForm.css';\r\n\r\nexport type FormData = {\r\n  startHour: string;\r\n  monthlyPay: number;\r\n  payDay: string;\r\n};\r\n\r\nconst schema = yup.object({\r\n  startHour: yup.string().required('Start time cannot be empty'),\r\n  payDay: yup.string().required('Pay day cannot be empty'),\r\n  monthlyPay: yup\r\n    .number()\r\n    .required('Monthly pay cannot be empty')\r\n    .typeError('Monthly pay must be a number')\r\n    .positive('Monthly pay must be positive')\r\n    .integer('Monthly pay must be an integer'),\r\n});\r\n\r\ntype Props = {\r\n  setFormData: React.Dispatch<React.SetStateAction<FormData>>;\r\n  setShowStatistics: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst InputField = ({\r\n  labelName,\r\n  fieldName,\r\n  register,\r\n  errors,\r\n  options,\r\n}: {\r\n  labelName: string;\r\n  fieldName: keyof FormData;\r\n  register: UseFormRegister<FormData>;\r\n  errors: FieldErrors<FormData>;\r\n  options?: {\r\n    defaultValue: string | number | readonly string[] | undefined;\r\n  };\r\n}): JSX.Element => (\r\n  <>\r\n    <label>{labelName}</label>\r\n    <input\r\n      {...{ ...register(fieldName), defaultValue: options?.defaultValue }}\r\n    />\r\n    {errors[fieldName] && <p>{errors[fieldName]?.message}</p>}\r\n  </>\r\n);\r\n\r\nconst MainForm = ({ setFormData, setShowStatistics }: Props): JSX.Element => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<FormData>({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const onSubmit: SubmitHandler<FormData> = data => {\r\n    setFormData(data);\r\n    setShowStatistics(true);\r\n  }; // your form submit function which will invoke after successful validation\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <InputField\r\n        {...{\r\n          labelName: 'Start Hour',\r\n          fieldName: 'startHour',\r\n          register,\r\n          errors,\r\n          options: { defaultValue: '12' },\r\n        }}\r\n      />\r\n      <InputField\r\n        {...{\r\n          labelName: 'Monthly Pay',\r\n          fieldName: 'monthlyPay',\r\n          register,\r\n          errors,\r\n          options: { defaultValue: 10600 },\r\n        }}\r\n      />\r\n      <InputField\r\n        {...{\r\n          labelName: 'Pay Day',\r\n          fieldName: 'payDay',\r\n          register,\r\n          errors,\r\n          options: { defaultValue: '13' },\r\n        }}\r\n      />\r\n      <input type=\"submit\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MainForm;\r\n","import React from 'react';\r\n\r\nimport './Card.css';\r\n\r\ntype Props = {\r\n  title: string;\r\n  value: string;\r\n  styles: {\r\n    gridRow: string;\r\n    gridColumn: string;\r\n  };\r\n};\r\n\r\nconst Card = ({ title, value, styles }: Props): JSX.Element => {\r\n  return (\r\n    <div className=\"card\" style={styles}>\r\n      <div className=\"card-title\">{title}</div>\r\n      <div className=\"card-value\">{value}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import moment from 'moment';\r\n\r\nimport { FormData } from '../main-form/MainForm';\r\nimport { MoneyCard, MoneyCardLayout, MoneyStatistics } from './types';\r\n\r\nconst DEFAULT_CURRENCY = 'RON';\r\n\r\nconst hoursPerMonth = 8 * 22;\r\n\r\nconst addCurrency = (value: number, currency = DEFAULT_CURRENCY): string =>\r\n  `${value} ${currency}`;\r\n\r\nconst precise = (value: number, precision?: number): number =>\r\n  Number(value.toFixed(precision || 2));\r\n\r\nconst computeTimeStatistics = (\r\n  startHour: string,\r\n  monthlyPay: number,\r\n): { moneySoFar: number; moneyLeft: number } => {\r\n  const startTime = moment(startHour, 'HH');\r\n  const currentTime = moment();\r\n  const endTime = moment(startTime).add(8, 'hours');\r\n  const moneyPerDay = monthlyPay / 22;\r\n\r\n  if (currentTime.isAfter(endTime)) {\r\n    return {\r\n      moneySoFar: moneyPerDay,\r\n      moneyLeft: 0,\r\n    };\r\n  }\r\n\r\n  if (currentTime.isBefore(startTime)) {\r\n    return {\r\n      moneySoFar: 0,\r\n      moneyLeft: moneyPerDay,\r\n    };\r\n  }\r\n\r\n  const totalDayTime = endTime.diff(startTime, 'milliseconds', true);\r\n  const timeSoFar = currentTime.diff(startTime, 'milliseconds', true);\r\n\r\n  const moneySoFar = (timeSoFar * moneyPerDay) / totalDayTime;\r\n\r\n  return {\r\n    moneySoFar,\r\n    moneyLeft: moneyPerDay - moneySoFar,\r\n  };\r\n};\r\n\r\nconst cardsLayout: MoneyCardLayout = {\r\n  perSecond: {\r\n    _tag: 'static',\r\n    title: 'Money Per Second',\r\n    position: [1, 1],\r\n  },\r\n  perHour: {\r\n    _tag: 'static',\r\n    title: 'Money Per Hour',\r\n    position: [2, 1],\r\n  },\r\n  perYear: {\r\n    _tag: 'static',\r\n    title: 'Money Per Year',\r\n    position: [3, 1],\r\n  },\r\n  moneySoFar: {\r\n    _tag: 'dynamic',\r\n    title: 'Money So Far Today',\r\n    position: [1, 2],\r\n    update: ({ startHour, monthlyPay }: FormData): string =>\r\n      addCurrency(\r\n        precise(computeTimeStatistics(startHour, monthlyPay).moneySoFar, 3),\r\n      ),\r\n  },\r\n  moneyLeft: {\r\n    _tag: 'dynamic',\r\n    title: 'Money Left Today',\r\n    position: [2, 2],\r\n    update: ({ startHour, monthlyPay }: FormData): string =>\r\n      addCurrency(\r\n        precise(computeTimeStatistics(startHour, monthlyPay).moneyLeft, 3),\r\n      ),\r\n  },\r\n  daysUntil: {\r\n    _tag: 'static',\r\n    title: 'Days Until Pay Day',\r\n    position: [3, 2],\r\n  },\r\n};\r\n\r\nexport const computeDaysUntil = (payday: string): number => {\r\n  const currentTime = moment();\r\n  const paydayTime = moment(payday, 'DD');\r\n\r\n  if (currentTime.date() > paydayTime.date()) {\r\n    paydayTime.add(1, 'months');\r\n  }\r\n\r\n  return paydayTime.diff(currentTime, 'days');\r\n};\r\n\r\nexport const computeStatistics = ({\r\n  startHour,\r\n  monthlyPay,\r\n  payDay,\r\n}: FormData): MoneyStatistics => {\r\n  const { moneySoFar, moneyLeft } = computeTimeStatistics(\r\n    startHour,\r\n    monthlyPay,\r\n  );\r\n\r\n  return {\r\n    perSecond: addCurrency(precise(monthlyPay / (hoursPerMonth * 3600), 5)),\r\n    perHour: addCurrency(precise(monthlyPay / hoursPerMonth)),\r\n    perYear: addCurrency(precise(monthlyPay * 12)),\r\n    moneySoFar: addCurrency(precise(moneySoFar, 3)),\r\n    moneyLeft: addCurrency(precise(moneyLeft, 3)),\r\n    daysUntil: `${computeDaysUntil(payDay)} Days`,\r\n  };\r\n};\r\n\r\nexport const hydrateValues = (\r\n  statistics: MoneyStatistics,\r\n  formData: FormData,\r\n): MoneyCard[] =>\r\n  Object.entries(statistics).map(([key, value]) => {\r\n    const layout = cardsLayout[key as keyof MoneyStatistics];\r\n    const {\r\n      _tag,\r\n      title,\r\n      position: [row, column],\r\n    } = layout;\r\n    const isDynamic = _tag === 'dynamic';\r\n\r\n    return {\r\n      _tag,\r\n      id: key,\r\n      title,\r\n      value,\r\n      styles: {\r\n        gridRow: `${row} / span 1`,\r\n        gridColumn: `${column} / span 1`,\r\n      },\r\n      ...{\r\n        update: isDynamic ? () => layout.update(formData) : () => '',\r\n      },\r\n    };\r\n  });\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport './DynamicCard.css';\r\n\r\ntype Props = {\r\n  title: string;\r\n  value: string;\r\n  styles: {\r\n    gridRow: string;\r\n    gridColumn: string;\r\n  };\r\n  update: () => string;\r\n};\r\n\r\nconst DynamicCard = ({ title, value, styles, update }: Props): JSX.Element => {\r\n  const [currentValue, setCurrentValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => setCurrentValue(update()), 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [update]);\r\n\r\n  return (\r\n    <div className=\"dynamic-card\" style={styles}>\r\n      <div className=\"dynamic-card-title\">{title}</div>\r\n      <div className=\"dynamic-card-value\">{currentValue}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DynamicCard;\r\n","import React from 'react';\r\n\r\nimport Card from '../card/Card';\r\nimport { computeStatistics, hydrateValues } from './tools';\r\nimport { Props } from './types';\r\nimport './Statistics.css';\r\nimport DynamicCard from '../dynamic-card/DynamicCard';\r\n\r\nconst Statistics = ({ formData, setShowStatistics }: Props): JSX.Element => {\r\n  return (\r\n    <div className=\"statistics-container\">\r\n      <div className=\"statistics-grid\">\r\n        {hydrateValues(computeStatistics(formData), formData).map(card =>\r\n          card._tag === 'dynamic' ? (\r\n            <DynamicCard key={card.id} {...card} />\r\n          ) : (\r\n            <Card key={card.id} {...card} />\r\n          ),\r\n        )}\r\n      </div>\r\n      <div className=\"statistics-footer\">\r\n        <button\r\n          className=\"back-button\"\r\n          onClick={() => setShowStatistics(false)}\r\n        >\r\n          Go Back\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport './Title.css';\r\n\r\nconst Title = (): JSX.Element => {\r\n  return <div className=\"main-title\">Money Counter</div>;\r\n};\r\n\r\nexport default Title;\r\n","import React, { useState } from 'react';\r\nimport MainForm, { FormData } from '../../components/main-form/MainForm';\r\nimport Statistics from '../../components/statistics/Statistics';\r\nimport Title from '../../components/title/Title';\r\n\r\nconst initialFormData = {\r\n  startHour: '',\r\n  monthlyPay: 0,\r\n  payDay: '',\r\n};\r\n\r\nconst LandingPage = (): JSX.Element => {\r\n  const [formData, setFormData] = useState<FormData>(initialFormData);\r\n  const [showStatistics, setShowStatistics] = useState<boolean>(false);\r\n\r\n  return (\r\n    <>\r\n      <Title />\r\n      {showStatistics ? (\r\n        <Statistics {...{ formData, setShowStatistics }} />\r\n      ) : (\r\n        <MainForm {...{ setFormData, setShowStatistics }} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\n\nimport LandingPage from './pages/landing-page/LandingPage';\nimport './App.css';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"App\">\n      <LandingPage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}